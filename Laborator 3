import os
import datetime

# Folder location
FOLDER_PATH = "C:\\path\\to\\folder"

# Dictionary to store file information
files_info = {}

def commit():
    """Update the snapshot time to current time."""
    global snapshot_time
    snapshot_time = datetime.datetime.now()
    print("Snapshot updated at:", snapshot_time)

def get_file_info(filename):
    """Retrieve information about a specific file."""
    file_path = os.path.join(FOLDER_PATH, filename)
    if not os.path.exists(file_path):
        print("File not found.")
        return

    # General file information
    file_info = {
        'name': filename,
        'extension': os.path.splitext(filename)[1][1:],
        'created_time': datetime.datetime.fromtimestamp(os.path.getctime(file_path)),
        'updated_time': datetime.datetime.fromtimestamp(os.path.getmtime(file_path))
    }

    # Additional information based on file type
    if file_info['extension'] in ['png', 'jpg']:
        # Image file
        size = os.path.getsize(file_path)
        file_info['size'] = f"{size} bytes"

    elif file_info['extension'] == 'txt':
        # Text file
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            file_info['line_count'] = len(lines)
            file_info['word_count'] = sum(len(line.split()) for line in lines)
            file_info['char_count'] = sum(len(line) for line in lines)

    elif file_info['extension'] in ['py', 'java']:
        # Program file
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            file_info['line_count'] = len(lines)
            file_info['class_count'] = sum(1 for line in lines if line.strip().startswith('class'))
            file_info['method_count'] = sum(1 for line in lines if line.strip().startswith('def'))

    return file_info

def info(filename):
    """Print general information about a file."""
    file_info = get_file_info(filename)
    if file_info:
        print("Information for", filename)
        for key, value in file_info.items():
            print(f"{key.capitalize()}: {value}")

def status():
    """Show changes for files since last commit."""
    current_time = datetime.datetime.now()
    print("Status:")
    for filename, last_updated in files_info.items():
        file_info = get_file_info(filename)
        if file_info['updated_time'] > last_updated:
            print(f"{filename} was changed since last commit.")
            files_info[filename] = current_time
        else:
            print(f"{filename} was not changed since last commit.")

# Initial commit
commit()

# Main loop
while True:
    action = input("\nEnter action (commit, info <filename>, status): ").split()
    if action[0] == 'commit':
        commit()
    elif action[0] == 'info':
        if len(action) == 2:
            info(action[1])
        else:
            print("Usage: info <filename>")
    elif action[0] == 'status':
        status()
    else:
        print("Invalid action.")
